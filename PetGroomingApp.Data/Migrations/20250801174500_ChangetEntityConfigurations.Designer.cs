// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetGroomingApp.Data;

#nullable disable

namespace PetGroomingApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250801174500_ChangetEntityConfigurations")]
    partial class ChangetEntityConfigurations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "028bfe39-58eb-4fbb-9045-91d385f53d48",
                            Email = "user1@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@MAIL.COM",
                            NormalizedUserName = "USER1@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEG78BxHXYBXVIQf/tQ1NZ7xDRlmnmnqPu8UmpIfg//37OlHZwPVAnNNQIYSri3hdNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2036e986-4229-4d15-9773-b8894f39a133",
                            TwoFactorEnabled = false,
                            UserName = "user1@mail.com"
                        },
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e78f086-f12c-40be-8443-d0585b7699dd",
                            Email = "user2@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@MAIL.COM",
                            NormalizedUserName = "USER2@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN+SPjgA1uDrtIgiQXeSso1bEaPfmpDWQroC4UChipOh3oCwLDZp8Gt1QdNlN5WCSw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de8cbed8-10b9-452a-bf8b-cc813cf91aff",
                            TwoFactorEnabled = false,
                            UserName = "user2@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Appointment identifier");

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2")
                        .HasComment("Appointment date and time");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Timestamp of when the appointment was created");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time")
                        .HasComment("Appointment duration");

                    b.Property<Guid?>("GroomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the groomer for the appointment");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Appointment notes");

                    b.Property<Guid?>("PetId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the pet for the appointment");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total price of appointment");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key to the user for the appointment");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTime")
                        .HasDatabaseName("Appointment_Time");

                    b.HasIndex("GroomerId");

                    b.HasIndex("PetId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments", t =>
                        {
                            t.HasComment("Appointment in the system");
                        });
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.AppointmentService", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentId", "ServiceId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentServices", t =>
                        {
                            t.HasComment("Join table mapping appointments to services");
                        });
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.Groomer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Groomer identifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Any description of the Groomer ");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Groomer first name");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Groomer image URL");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows if Groomer is no longer working");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Groomer job title");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Groomer last name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Groomer phone number");

                    b.HasKey("Id");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("Groomers", t =>
                        {
                            t.HasComment("Groomer in the system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ae6c761-1363-4a23-9965-171c70f935de"),
                            Description = "Experienced groomer with a passion for animals.",
                            FirstName = "Lara",
                            ImageUrl = "img/team/1.png",
                            IsDeleted = false,
                            JobTitle = "Groomer, Manager",
                            LastName = "Smith",
                            PhoneNumber = "555-5678"
                        },
                        new
                        {
                            Id = new Guid("f4c3e429-0e36-47af-99a2-0c7581a7fc67"),
                            Description = "Loves grooming and caring for pets.",
                            FirstName = "Tom",
                            ImageUrl = "img/team/2.png",
                            IsDeleted = false,
                            JobTitle = "Groomer Assistant",
                            LastName = "Brown",
                            PhoneNumber = "555-1234"
                        },
                        new
                        {
                            Id = new Guid("b2c1d3e4-5f6a-7b8c-9d0e-1f2a3b4c5d6e"),
                            Description = "Expert in grooming all breeds of dogs and cats.",
                            FirstName = "Sara",
                            ImageUrl = "img/team/3.png",
                            IsDeleted = false,
                            JobTitle = "Senior Groomer",
                            LastName = "Croft",
                            PhoneNumber = "555-8765"
                        });
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Manager identifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Manager's user entity");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Managers", t =>
                        {
                            t.HasComment("Manager in the system");
                        });
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Pet Identifier");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("Pet age");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Pet breed");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasComment("Pet gender");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Pet image URL");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Indicates if the pet is deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Pet name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Notes for the pet");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key to the owner of the pet");

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasComment("Pet size");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("Pet type");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Size");

                    b.HasIndex("Type");

                    b.ToTable("Pets", t =>
                        {
                            t.HasComment("Pet entity in the system");
                        });
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Service identifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Service description");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time")
                        .HasComment("Service duration");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Service image");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if Service is deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Service name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Service price");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Price");

                    b.ToTable("Services", t =>
                        {
                            t.HasComment("Service entity representing available grooming services");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("57b2b212-fab4-4fce-9bb8-2d6b2f9b6ab5"),
                            Description = "Full body grooming and trim",
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            ImageUrl = "img/service/grooming.png",
                            IsDeleted = false,
                            Name = "Hair Trim",
                            Price = 25.00m
                        },
                        new
                        {
                            Id = new Guid("7a4152ef-22ba-4d14-b621-da300be177b2"),
                            Description = "Claw trimming and smoothing",
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            ImageUrl = "img/service/nail-file.png",
                            IsDeleted = false,
                            Name = "Nail Clip",
                            Price = 15.00m
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4a8b-9c0d-e1f2a3b4c5d6"),
                            Description = "Carefully cleaning the ears",
                            Duration = new TimeSpan(0, 0, 15, 0, 0),
                            ImageUrl = "img/service/ear-cleaning-cat.png",
                            IsDeleted = false,
                            Name = "Ear Clean",
                            Price = 10.00m
                        },
                        new
                        {
                            Id = new Guid("19780568-cccc-4186-9a7e-eec6067fff1c"),
                            Description = "Bathing with organic shampoo",
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            ImageUrl = "img/service/bath-dog.png",
                            IsDeleted = false,
                            Name = "Bath",
                            Price = 25.00m
                        },
                        new
                        {
                            Id = new Guid("da876cd4-8c8a-4979-9a53-3d16bc1394fd"),
                            Description = "Includes hair trim, nail clip, ear clean, and bath",
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            ImageUrl = "img/service/full-grooming.png",
                            IsDeleted = false,
                            Name = "Full Grooming Package",
                            Price = 70.00m
                        },
                        new
                        {
                            Id = new Guid("f3f8a9ef-6dc0-4c8b-a9b1-9bd250d4e8e6"),
                            Description = "Reduces shedding and improves coat health",
                            Duration = new TimeSpan(0, 0, 45, 0, 0),
                            ImageUrl = "img/service/deshedding.png",
                            IsDeleted = false,
                            Name = "De-shedding Treatment",
                            Price = 40.00m
                        },
                        new
                        {
                            Id = new Guid("61d99a19-c29a-4c38-b2d1-df5f05d3a5e1"),
                            Description = "Professional teeth cleaning for pets",
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            ImageUrl = "img/service/teeth-cleaning.png",
                            IsDeleted = false,
                            Name = "Teeth Cleaning",
                            Price = 30.00m
                        });
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.UserService", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("UserServices");
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GroomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("GroomerId");

                    b.HasIndex("ManagerId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.Appointment", b =>
                {
                    b.HasOne("PetGroomingApp.Data.Models.Groomer", "Groomer")
                        .WithMany("Appointments")
                        .HasForeignKey("GroomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PetGroomingApp.Data.Models.Pet", "Pet")
                        .WithMany("Appointments")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PetGroomingApp.Data.Models.ApplicationUser", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Groomer");

                    b.Navigation("Pet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.AppointmentService", b =>
                {
                    b.HasOne("PetGroomingApp.Data.Models.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PetGroomingApp.Data.Models.Service", "Service")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.Manager", b =>
                {
                    b.HasOne("PetGroomingApp.Data.Models.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("PetGroomingApp.Data.Models.Manager", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.Pet", b =>
                {
                    b.HasOne("PetGroomingApp.Data.Models.ApplicationUser", "Owner")
                        .WithMany("Pets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.UserService", b =>
                {
                    b.HasOne("PetGroomingApp.Data.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetGroomingApp.Data.Models.ApplicationUser", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("PetGroomingApp.Data.Models.Groomer", "Groomer")
                        .WithMany()
                        .HasForeignKey("GroomerId");

                    b.HasOne("PetGroomingApp.Data.Models.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("Groomer");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.Groomer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.Pet", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.Service", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("PetGroomingApp.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Favorites");

                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
